=====================
7. Flaskを使いこなす2  
=====================
ここからはハンズオンではなく紹介です。

話を聞きながら気になったら実装してみてください。

1. ログ Logging
2. デバッグ
3. テスト


1. ログ Logging 
===============
flaskオブジェクトのloggerを使うことでログを出力できます。。

flaskr/views.py

.. literalinclude:: ../samples/07/01/flaskr/views.py

この状態で実行してみます。::

    python manage.py debug

ログが出力されたのが確認できます。::

    --------------------------------------------------------------------------------
    DEBUG in views [/Users/daisuke/Dropbox/private/study_python_flask/samples/07/01/flaskr/views.py:10]:
    debug
    --------------------------------------------------------------------------------
    --------------------------------------------------------------------------------
    INFO in views [/Users/daisuke/Dropbox/private/study_python_flask/samples/07/01/flaskr/views.py:11]:
    info
    --------------------------------------------------------------------------------
    --------------------------------------------------------------------------------
    WARNING in views [/Users/daisuke/Dropbox/private/study_python_flask/samples/07/01/flaskr/views.py:12]:
    warning
    --------------------------------------------------------------------------------
    --------------------------------------------------------------------------------
    ERROR in views [/Users/daisuke/Dropbox/private/study_python_flask/samples/07/01/flaskr/views.py:13]:
    error
    --------------------------------------------------------------------------------
    --------------------------------------------------------------------------------
    CRITICAL in views [/Users/daisuke/Dropbox/private/study_python_flask/samples/07/01/flaskr/views.py:14]:
    critical
    --------------------------------------------------------------------------------


次に、ファイルに出力するよう設定します。

flaskr/log.pyを追加します。

.. literalinclude:: ../samples/07/01/flaskr/log.py


logの設定をします。

.. literalinclude:: ../samples/07/01/flaskr/__init__.py


実行してみます。今回はデバックモードをFalseで実行します。画面上にはログは出力されません。::

    python manage.py run

すると、画面上にログは出力されませんが、logs配下にdebug.logとerror.logが生成されます。


2. デバッグ 
===============
開発時にはブレークポイントを使ってデバッグできると便利です。

幾つか方法はありますがオススメは以下の２つです。

* debugを使う
* IDE（pycharmなど）を使う

debug
------
Flaskにかぎらずpythonプログラムのデバッグには簡単に使用できます。

インストール::

    pip install debug


使い方は簡単で、ブレークポイントを張りたいところに、import debugを記述するだけです。::

    import debug


ide
---
pycharmやvisualstudioを使うことで、かなり簡単にデバッグすることが可能です。



3. テスト 15分
===============
flaskにはtest_clientというテストクライアントを取得できるので簡単に動作確認できます。

::

    mkdir tests
    touch tests/__init__.py


.. literalinclude:: ../samples/07/03/flaskr/__init__.py


.. literalinclude:: ../samples/07/03/flaskr/factory.py


.. literalinclude:: ../samples/07/03/tests/configy.py


.. literalinclude:: ../samples/07/03/tests/test_flaskr.py



4. その他いろいろ
==================

* Flaskを使った開発パターン　`Patterns for Flask — Flask 0.10.1 documentation <http://flask.pocoo.org/docs/patterns/>`_
* Larger Applications
* Application Factories
* Uploading Files
* View Decorators
* Form Validation with WTForms
* Adding a favicon
* Celery Based Background Tasks


コマンドライン・インタフェースの作成
------------------------------------
次のようにmanage.pyを変更します。

.. literalinclude:: ../samples/04/01/manage.py


このように変更すると次のようなコマンドが利用可能になります。::

    $ python manage.py
    usage: manage.py [-h]

                     {shell,run,list_users,delete_user,runserver,create_user,debug,init_db}
                     ...

    positional arguments:
      {shell,run,list_users,delete_user,runserver,create_user,debug,init_db}
        shell               Runs a Python shell inside Flask application context.
        run                 Runs the Flask development server i.e. app.run()
        list_users
        delete_user
        runserver           Runs the Flask development server i.e. app.run()
        create_user
        debug               Runs the Flask development server i.e. app.run()
        init_db

    optional arguments:
      -h, --help            show this help message and exit


実際に追加してみましょう。::

    $ python manage.py init_db

    $ python manage.py list_users

    $ python manage.py create_user
    Username: testuser
    Password:
    User created successfully

    $ python manage.py list_users
    <User id=1 username=u'testuser'>

    $ python manage.py delete_user
    Username: testuser
    User deleted successfully

    $ python manage.py list_users

    $ 


今回は、username=testuser、password=testuserで
ユーザーを作成しておきます。


LoginManagerの設定
-------------------
**ここからはsamples/04/02を参考にして下さい**

ユーザーの追加削除が簡単にできるようになったので、
Flask-Loginの処理を完成させ、追加したユーザーでログインできるようにします。


まず、__init__.pyからプラグインの生成処理を別ファイルにします。

flaskr/core.py

.. literalinclude:: ../samples/04/02/flaskr/core.py


次にLoginManagerの設定をします。

flaskr/__init__.py

.. literalinclude:: ../samples/04/02/flaskr/__init__.py


ログイン処理を修正します。

flaskr/views.py

.. literalinclude:: ../samples/04/02/flaskr/views.py


テンプレートを修正します。

flaskr/templates/layout.html

.. literalinclude:: ../samples/04/02/flaskr/templates/layout.html
    :language: html

flaskr/templates/show_entries.html

.. literalinclude:: ../samples/04/02/flaskr/templates/show_entries.html
    :language: html


実行してみます。::

    python manage.py debug

ブラウザで、http://127.0.0.1:5000を開きます。

作成した testuser / testuser でログインします。

別のユーザーを追加してログインできることを確かめて下さい。



Flask-WTFでフォームをクラス化
-------------------------------
フォームをWTFormsというライブラリを使って、クラス化します。

WTFormsを使う利点としては次のようなことがあります。

* フォームに関する処理がまとまる
* CSRF対策し忘れ防止

まず、wtformsというフォームツールをFlaskで簡単に扱うための
Flask-WTFをインストールします。::

    pip install Flask-WTF


LoginFormを追加します。

.. literalinclude:: ../samples/04/03/flaskr/forms.py


viewをLoginFormを利用するように変更します。

.. literalinclude:: ../samples/04/03/flaskr/views.py


テンプレートをLoginFormを利用するように変更します。

.. literalinclude:: ../samples/04/03/flaskr/templates/login.html
    :language: html


実行してみましょう。::

    python manage.py debug


今までと変わらない動作をしていると思います。


課題
------
EntryFormも作成しよう。


